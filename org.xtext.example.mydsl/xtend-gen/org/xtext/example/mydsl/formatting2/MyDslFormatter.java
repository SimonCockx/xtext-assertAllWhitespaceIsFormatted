/**
 * generated by Xtext 2.27.0
 */
package org.xtext.example.mydsl.formatting2;

import java.util.Arrays;
import java.util.function.Consumer;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IFormattableSubDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.ISubFormatter;
import org.eclipse.xtext.formatting2.regionaccess.IEObjectRegion;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.formatting2.regionaccess.ITextSegment;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.xtext.example.mydsl.myDsl.ConditionalExpression;
import org.xtext.example.mydsl.myDsl.ExistsOperation;
import org.xtext.example.mydsl.myDsl.Expression;
import org.xtext.example.mydsl.myDsl.Model;

@SuppressWarnings("all")
public class MyDslFormatter extends AbstractFormatter2 {
  protected void _format(final Model model, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Model>surround(model, _function);
    final Consumer<ISemanticRegion> _function_1 = (ISemanticRegion it) -> {
      final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it_1) -> {
        it_1.newLine();
      };
      document.prepend(it, _function_2);
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it_1) -> {
        it_1.noSpace();
      };
      document.append(it, _function_3);
    };
    this.textRegionExtensions.regionFor(model).keywords("Expression").forEach(_function_1);
    final Consumer<ISemanticRegion> _function_2 = (ISemanticRegion it) -> {
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it_1) -> {
        it_1.newLine();
      };
      document.append(it, _function_3);
    };
    this.textRegionExtensions.regionFor(model).keywords(":").forEach(_function_2);
    final Consumer<Expression> _function_3 = (Expression it) -> {
      final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it_1) -> {
        it_1.indent();
      };
      document.<Expression>surround(it, _function_4);
      document.<Expression>format(it);
    };
    model.getExprs().forEach(_function_3);
  }

  protected void _format(final ExistsOperation existsOperation, @Extension final IFormattableDocument document) {
    final IEObjectRegion existsRegion = this.textRegionExtensions.regionForEObject(existsOperation);
    final ITextSegment existsRegionAndNext = existsRegion.merge(existsRegion.getNextHiddenRegion());
    final ISubFormatter _function = (IFormattableSubDocument doc) -> {
      @Extension
      final IFormattableSubDocument singleLineDoc = doc.requireFitsInLine();
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      singleLineDoc.prepend(this.textRegionExtensions.regionFor(existsOperation).keyword("exists"), _function_1);
      singleLineDoc.<Expression>format(existsOperation.getArgument());
    };
    final ISubFormatter _function_1 = (IFormattableSubDocument doc) -> {
      final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      doc.prepend(this.textRegionExtensions.regionFor(existsOperation).keyword("exists"), _function_2);
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.indent();
      };
      doc.set(
        this.textRegionExtensions.nextHiddenRegion(existsOperation.getArgument()), 
        this.textRegionExtensions.nextHiddenRegion(existsOperation), _function_3);
      doc.<Expression>format(existsOperation.getArgument());
    };
    document.formatConditionally(existsRegionAndNext.getOffset(), existsRegionAndNext.getLength(), _function, _function_1);
  }

  protected void _format(final ConditionalExpression conditional, @Extension final IFormattableDocument document) {
    final Consumer<ISemanticRegion> _function = (ISemanticRegion it) -> {
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it_1) -> {
        it_1.oneSpace();
      };
      document.append(it, _function_1);
    };
    this.textRegionExtensions.regionFor(conditional).keywords("if", "then").forEach(_function);
    final IEObjectRegion conditionalRegion = this.textRegionExtensions.regionForEObject(conditional);
    final ITextSegment conditionalRegionAndNext = conditionalRegion.merge(conditionalRegion.getNextHiddenRegion());
    final ISubFormatter _function_1 = (IFormattableSubDocument doc) -> {
      @Extension
      final IFormattableSubDocument singleLineDoc = doc.requireFitsInLine();
      final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      singleLineDoc.prepend(this.textRegionExtensions.regionFor(conditional).keyword("then"), _function_2);
      singleLineDoc.<Expression>format(conditional.getCondition());
      singleLineDoc.<Expression>format(conditional.getThen());
    };
    final ISubFormatter _function_2 = (IFormattableSubDocument doc) -> {
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      doc.prepend(this.textRegionExtensions.regionFor(conditional).keyword("then"), _function_3);
      doc.<Expression>format(conditional.getCondition());
      doc.<Expression>format(conditional.getThen());
    };
    document.formatConditionally(conditionalRegionAndNext.getOffset(), conditionalRegionAndNext.getLength(), _function_1, _function_2);
  }

  public void format(final Object conditional, final IFormattableDocument document) {
    if (conditional instanceof XtextResource) {
      _format((XtextResource)conditional, document);
      return;
    } else if (conditional instanceof ConditionalExpression) {
      _format((ConditionalExpression)conditional, document);
      return;
    } else if (conditional instanceof ExistsOperation) {
      _format((ExistsOperation)conditional, document);
      return;
    } else if (conditional instanceof Model) {
      _format((Model)conditional, document);
      return;
    } else if (conditional instanceof EObject) {
      _format((EObject)conditional, document);
      return;
    } else if (conditional == null) {
      _format((Void)null, document);
      return;
    } else if (conditional != null) {
      _format(conditional, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(conditional, document).toString());
    }
  }
}
