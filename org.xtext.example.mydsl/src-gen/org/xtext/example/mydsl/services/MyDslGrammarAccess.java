/*
 * generated by Xtext 2.27.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExpressionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprsExpressionParserRuleCall_2_0 = (RuleCall)cExprsAssignment_2.eContents().get(0);
		
		//Model:
		//    ('Expression' ':'
		//    exprs+=Expression)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('Expression' ':'
		//exprs+=Expression)*
		public Group getGroup() { return cGroup; }
		
		//'Expression'
		public Keyword getExpressionKeyword_0() { return cExpressionKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//exprs+=Expression
		public Assignment getExprsAssignment_2() { return cExprsAssignment_2; }
		
		//Expression
		public RuleCall getExprsExpressionParserRuleCall_2_0() { return cExprsExpressionParserRuleCall_2_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Expression");
		private final RuleCall cExistsOperationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//    ExistsOperation
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ExistsOperation
		public RuleCall getExistsOperationParserRuleCall() { return cExistsOperationParserRuleCall; }
	}
	public class ExistsOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ExistsOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cExistsOperationArgumentAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cExistsKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		
		//ExistsOperation returns Expression:
		//    Primary =>({ExistsOperation.argument=current} 'exists')*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary =>({ExistsOperation.argument=current} 'exists')*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//=>({ExistsOperation.argument=current} 'exists')*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ExistsOperation.argument=current} 'exists'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{ExistsOperation.argument=current}
		public Action getExistsOperationArgumentAction_1_0_0() { return cExistsOperationArgumentAction_1_0_0; }
		
		//'exists'
		public Keyword getExistsKeyword_1_0_1() { return cExistsKeyword_1_0_1; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBooleanLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cTrueKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cConditionalExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cIfKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cConditionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_1_2_0 = (RuleCall)cConditionAssignment_1_2.eContents().get(0);
		private final Keyword cThenKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cThenAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cThenExpressionParserRuleCall_1_4_0 = (RuleCall)cThenAssignment_1_4.eContents().get(0);
		
		//Primary returns Expression:
		//    {BooleanLiteral} 'True'
		//    | {ConditionalExpression} 'if' condition=Expression 'then' then=Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanLiteral} 'True'
		//| {ConditionalExpression} 'if' condition=Expression 'then' then=Expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{BooleanLiteral} 'True'
		public Group getGroup_0() { return cGroup_0; }
		
		//{BooleanLiteral}
		public Action getBooleanLiteralAction_0_0() { return cBooleanLiteralAction_0_0; }
		
		//'True'
		public Keyword getTrueKeyword_0_1() { return cTrueKeyword_0_1; }
		
		//{ConditionalExpression} 'if' condition=Expression 'then' then=Expression
		public Group getGroup_1() { return cGroup_1; }
		
		//{ConditionalExpression}
		public Action getConditionalExpressionAction_1_0() { return cConditionalExpressionAction_1_0; }
		
		//'if'
		public Keyword getIfKeyword_1_1() { return cIfKeyword_1_1; }
		
		//condition=Expression
		public Assignment getConditionAssignment_1_2() { return cConditionAssignment_1_2; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_2_0() { return cConditionExpressionParserRuleCall_1_2_0; }
		
		//'then'
		public Keyword getThenKeyword_1_3() { return cThenKeyword_1_3; }
		
		//then=Expression
		public Assignment getThenAssignment_1_4() { return cThenAssignment_1_4; }
		
		//Expression
		public RuleCall getThenExpressionParserRuleCall_1_4_0() { return cThenExpressionParserRuleCall_1_4_0; }
	}
	
	
	private final ModelElements pModel;
	private final ExpressionElements pExpression;
	private final ExistsOperationElements pExistsOperation;
	private final PrimaryElements pPrimary;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pExpression = new ExpressionElements();
		this.pExistsOperation = new ExistsOperationElements();
		this.pPrimary = new PrimaryElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    ('Expression' ':'
	//    exprs+=Expression)*
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Expression:
	//    ExistsOperation
	//;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//ExistsOperation returns Expression:
	//    Primary =>({ExistsOperation.argument=current} 'exists')*
	//;
	public ExistsOperationElements getExistsOperationAccess() {
		return pExistsOperation;
	}
	
	public ParserRule getExistsOperationRule() {
		return getExistsOperationAccess().getRule();
	}
	
	//Primary returns Expression:
	//    {BooleanLiteral} 'True'
	//    | {ConditionalExpression} 'if' condition=Expression 'then' then=Expression
	//;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
